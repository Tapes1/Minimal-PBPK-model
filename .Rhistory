dose = c(0.74, 1.04, 1.48)
ratio = c(1.27, 1.54, 0.98)
sd = c(0.33, 0.49, 0.42)
auc.10to20 = data.frame(as.factor(dose), ratio, sd)
?plot()
install.packages("Hmisc")
updateR()
install.packages("installr")
setInternet2(TRUE)
install.packages("installr")
installr::updateR()
install.packages(installr)
install.packages("installr"")
require(installr)
download.packages("installr")
mass
library(MASS)
boston
MASS
library(MASS)
Boston
Bost = Boston
head(Bost)
fix(Bost)
help(Boston)
help(Boston)
fix(Boston)
wine.fl = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
wine.fl = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
wine = read.csv(wine.fl)
fix(wine)
wine = read.csv(wine.fl, header=FALSE)
wine = read.csv(wine.fl, header=FALSE)
fix(wine)
wine$Alcohol = wine$V1
fix(wine)
fix(wine)
colnames(wine) = c("Alcohol", "Malic Acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavinoids", "Nonflavinoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
fix(wine)
fix(wine)
colnames(wine) = c("Class", "Alcohol", "Malic Acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavinoids", "Nonflavinoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
colnames(wine) = c("Class", "Alcohol", "Malic Acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavinoids", "Nonflavinoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
fix(wine)
pairs(wine)
download.packages("Design")
install.packages("DAAG")
install.packages("DAAG")
library(DAAG)
head(wine)
fit = lm(Class ~ ., data = wine)
summary(lm.fit)
summary(fit)
library(bootstrap)
install.packages("bootstrap")
download.packages("bootstrap")
pairs(wine)
read.csv("C:\Users\Chris Walsh\Documents\Coding + Data Science\R\DexPK.csv")
Dex.PK <- read.csv("~/Coding + Data Science/R/Dex PK.csv")
View(Dex.PK)
install.packages("caret", "mlbench")
install.packages("mlbench")
DexPK[DexPK$DexRoute == 1]
Dex.PK[Dex.PK$DexRoute == 1]
Dex,PK$Route == 1
Dex,PK$DexRoute == 1
Dex.PK$DexRoute == 1
IV = Dex.PK$DexRoute == 1
Dex.PK[x]
Dex.PK(x)
Dex.PK[(x)]
Dex.PK[IV]
Dex.PK[(IV)]
Dex.PK[,IV]
Dex.PK[IV,]
DexIV = Dex.PK[IV,]
DexIV = DexIV[DexIV$Time != NaN]
DexIV = DexIV[DexIV$Time != NaN,]
DexIV = DexIV[DexIV$DexLevel != NaN,]
DexIV$Time != NaN AND DexIV$DexLevel != NaN
DexIV$Time != NaN & DexIV$DexLevel != NaN
head(DexIV)
DexIV = Dex.PK[Dex.PK == IV,]
head(DexIV)
DexIV = complete.cases(DexIV)
DexIv = Dex.PK[IV,]
DexIv = DexIv[DexIV,]
dim(DexIv)
sum(DexIV)
?complete.cases
Dex.PK = na.omit(Dex.PK)
Dex.PK
DexIV = Dex.PK[IV,]
?train
??train
install.packages("pls")
?predict
findLinearCombos(DexIV)
library(caret)
findLinearCombos(DexIV)
DexIV = na.omit(DexIV)
findLinearCombos(DexIV)
?groupedData
DexIVG = groupedData(DexLevel ~ Time|Studynumber, data = DexIV)
library(nlme)
DexIVG = groupedData(DexLevel ~ Time|Studynumber, data = DexIV)
head(DexIVG)
summary(DexIVG)
plot(DexIVG)
?nlsList
fm1 = nlsList(DexLevel~SSlogis(Time, BSA, Age), data = DexIVG)
?SSlogis
fm1 = nlsList(DexLevel~SSlogis(Time, Asym, xmid, scal = ), data = DexIVG)
fm1 = nlsList(DexLevel~SSlogis(Time, Asym, xmid, scal), data = DexIVG)
head(DexIV)
library(nlme)
model.fit = (DexLevel ~ Time, random = ~ BSA | Studynumber, data = DexIV)
model.fit = (DexLevel ~ Time, random = ~ BSA | Studynumber, data = DexIV)
model.fit = lme(DexLevel ~ Time, random = ~ BSA | Studynumber, data = DexIV)
model.fit
summary(model.fit)
read.csv(//nicrp)
read.csv("//nicrpog1/Pharmacology/Users/Chris Walsh/ALL vs General cancer.csv")
AAG = read.csv("//nicrpog1/Pharmacology/Users/Chris Walsh/ALL vs General cancer.csv")
head(AAG)
boxplot(AAG$ALL)
boxplot(AAG$ALL,AAG$AAG..mg.mL.)
?boxplot
boxplot(AAG$ALL,AAG$AAG..mg.mL., notch = TRUE)
?boxplot
boxplot(AAG$ALL,AAG$AAG..mg.mL., names = c("ALL", "Non-specific cancer"))
boxplot(AAG$ALL,AAG$AAG..mg.mL., names = c("ALL", "Non-specific cancer"), ylab = "AAG (mg/mL)")
linrary(nlme())
library(nlme)
plot(CO2, outer = ~Treatment*Type, layout = c(4,1))
x = seq(2.8, 4, 0.01)
f = function(a,b,c,x) {}
f = function(a,b,c,x) {retrun(a*(1-exp(-exp(b)*(x-c))))}
summary(f)
y = f(1.5,2,3,x)
f = function(a,b,c,x) {return(a*(1-exp(-exp(b)*(x-c))))}
y = f(1.5,2,3,x)
plot(x,y,type = 'l', ylim = c(-2,3))
grid(5,5, lwd = 2)
nlsList(y,CO2)
?SSasympOff
CO2.list = nlsList(SSasympOff, CO2)
CO2.list
plot(intervals(CO2.list))
fm1CO2.ls
CO2.nlme = nlme(CO2.list)
CO2.nlme
CO2.nlme2 = update(CO2.nlme, random = Asym + lrc ~ 1)
CO2.nlme2
anova(CO2.nlme, CO2.nlme2)
CO2.nlmeRE = ranef(CO2.nlme2, augFrame = T)
CO2.nlmeRE
?ranef
plot(CO2.nlmeRE, form = ~ Type * Treatment)
mtcars
plot(mtcars$disp, mtcars$mpg, xlab = "Engine displacement", ylab = "Miles per Galon", main = "MPG compared to engine displacement")
plot(mtcars$disp, mtcars$mpg, xlab = "Engine displacement", ylab = "Miles per Galon", main = "MPG compared to engine displacement", las = 1)
library(ggplot2)
qplot(mpg, disp, data = mtcars)
qplot(mpg, disp, ylim = c(0,35), data = mtcars)
qplot(disp, mpg, ylim = c(0,35), data = mtcars)
qplot(cty, hwy, data = mpg)
mpg
qplot(cty, hwy, data = mpg, geom = "gitter")
qplot(cty, hwy, data = mpg, geom = "jitter")
ggplot(pressure, aes(x = temperature, y = pressure)) + geom_line()
ggplot(pressure, aes(x = temperature, y = pressure), ylim = c(0,600)) + geom_line()
ggplot(pressure, aes(x = temperature, y = pressure), ylim = c(0,600)) + geom_line() + geom_point()
ggplot(pressure, aes(x = temperature, y = pressure), ylim = 0) + geom_line() + geom_point()
ggplot(pressure, aes(x = temperature, y = pressure), ylim = 500) + geom_line() + geom_point()
barplot(BOD$demand, main = "Graph of demand")
cylcount = table(mtcars$cyl)
cylcount
barplot(cylcount)
qplot(factor(mtcars$cyl))
ggplot(mtcars, aes(factor(cyl))) + geom_bar()
mycolors = heat.colors(3)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(fill = mycolors)
par(bty = 1)
Heart <- c(AC.PL = 1, f.EW = 2)
Heart$AC.PL
Heart[AC.PL]
Heart[1]
Heart
Heart$f.EW
Heart%f.EW
Heart <- data.frame(AC.PL = 1, f.EW = 2)
Heart$f.EW
setwd("~/PhD Work/Minimal PBPK model")
params <- read.csv("parameters for rodgers + rowland.csv")
?read.csv
getwd()
params <- read.csv("parameters for rodgers + rowland.csv")
params <- read.csv("~/PhD Work/Minimal PBPK model/parameters for rodgers +rowland.csv", row.names=1)
View(params)
params[Liver]
params[,Liver]
params[Liver,]
params["Liver",]
?retrun
?return
blood <- c(AL = 2, DR = 4)
blood["AL",]
blood["AL"]
x <- function(AL, DR) {}
x <- function(AL, DR) {
return(AL + DR)
}
x(blood)
x <- function(x) {
return(x["AL"] + x["DR"])
}
x(blood)
x <- function(x) {
attach(x)
return(AL + DR)
}
x(blood)
?attach
blood <- data.frame(AL = 2, DR = 2)
x(blood)
# Function to derive the Kpu value for a given tissue as detailed in the Rodgers and Rowland paper, J Pharm Sci, 2005
params <- read.csv("~/PhD work/Minimal PBPK model/parameters for rodgers +rowland.csv")
drug <- read.csv("drug parameter file")
Ka.BC <- function (x) {       ##x is a data frame of dimension n:1 where n is the number of parameters in the equaition.
a <- 10^(drug.pKa-pH.BC)
b <- 10^(pKa-pH.P)
P <- 10^2
pKa <- 12
Kp.BC <- 1
return(Ka <- (Kp.BC - (((1 + a) / (1 + b)) * f.IW.blood) - ((P * f.NL.blood + (0.3 * P + 0.7) * f.NP.blood)) / (1 + b)) * (( 1 + b) / (AC.PL.blood * a)))
}
Ka.BC(params["Liver",])
# Function to derive the Kpu value for a given tissue as detailed in the Rodgers and Rowland paper, J Pharm Sci, 2005
params <- read.csv("~/PhD work/Minimal PBPK model/parameters for rodgers +rowland.csv")
drug <- read.csv("drug parameter file")
Ka.BC <- function (x) {       ##x is a data frame of dimension n:1 where n is the number of parameters in the equaition.
a <- 10^(drug.pKa-pH.BC)
b <- 10^(pKa-pH.P)
P <- 10^2
drug.pKa <- 12
Kp.BC <- 1
return(Ka <- (Kp.BC - (((1 + a) / (1 + b)) * f.IW.blood) - ((P * f.NL.blood + (0.3 * P + 0.7) * f.NP.blood)) / (1 + b)) * (( 1 + b) / (AC.PL.blood * a)))
}
Ka.BC(params["Liver",])
# Function to derive the Kpu value for a given tissue as detailed in the Rodgers and Rowland paper, J Pharm Sci, 2005
params <- read.csv("~/PhD work/Minimal PBPK model/parameters for rodgers +rowland.csv")
drug <- read.csv("drug parameter file")
Ka.BC <- function (x) {       ##x is a data frame of dimension n:1 where n is the number of parameters in the equaition.
drug.pKa <- 12
Kp.BC <- 1
a <- 10^(drug.pKa-pH.BC)
b <- 10^(pKa-pH.P)
P <- 10^2
return(Ka <- (Kp.BC - (((1 + a) / (1 + b)) * f.IW.blood) - ((P * f.NL.blood + (0.3 * P + 0.7) * f.NP.blood)) / (1 + b)) * (( 1 + b) / (AC.PL.blood * a)))
}
Ka.BC(params["Liver",])
detach(blood)
View(x)
detach(x)
# Function to derive the Kpu value for a given tissue as detailed in the Rodgers and Rowland paper, J Pharm Sci, 2005
params <- read.csv("~/PhD work/Minimal PBPK model/parameters for rodgers +rowland.csv")
drug <- read.csv("drug parameter file")
Ka.BC <- function (x) {       ##x is a data frame of dimension n:1 where n is the number of parameters in the equaition.
attach(x)
on.exit(detach(x))
drug.pKa <- 12
Kp.BC <- 1
a <- 10^(drug.pKa-pH.blood)
b <- 10^(pKa-pH.plasma)
P <- 10^2
return(Ka <- (Kp.BC - (((1 + a) / (1 + b)) * f.IW.blood) - ((P * f.NL.blood + (0.3 * P + 0.7) * f.NP.blood)) / (1 + b)) * (( 1 + b) / (AC.PL.blood * a)))
}
Ka.BC(params["Liver",])
# Function to derive the Kpu value for a given tissue as detailed in the Rodgers and Rowland paper, J Pharm Sci, 2005
params <- read.csv("~/PhD work/Minimal PBPK model/parameters for rodgers +rowland.csv")
drug <- read.csv("drug parameter file")
Ka.BC <- function (x) {       ##x is a data frame of dimension n:1 where n is the number of parameters in the equaition.
attach(x)
on.exit(detach(x))
drug.pKa <- 12
Kp.BC <- 1
a <- 10^(drug.pKa-pH.blood)
b <- 10^(drug.pKa-pH.plasma)
P <- 10^2
return(Ka <- (Kp.BC - (((1 + a) / (1 + b)) * f.IW.blood) - ((P * f.NL.blood + (0.3 * P + 0.7) * f.NP.blood)) / (1 + b)) * (( 1 + b) / (AC.PL.blood * a)))
}
Ka.BC(params["Liver",])
# Function to derive the Kpu value for a given tissue as detailed in the Rodgers and Rowland paper, J Pharm Sci, 2005
params <- read.csv("~/PhD work/Minimal PBPK model/parameters for rodgers +rowland.csv")
drug <- read.csv("drug parameter file")
Ka.BC <- function (x) {       ##x is a data frame of dimension n:1 where n is the number of parameters in the equaition.
attach(x)
on.exit(detach(x))
drug.pKa <- 12
Kp.BC <- 1
a <- 10^(drug.pKa-pH.blood)
b <- 10^(drug.pKa-pH.P)
P <- 10^2
return(Ka <- (Kp.BC - (((1 + a) / (1 + b)) * f.IW.blood) - ((P * f.NL.blood + (0.3 * P + 0.7) * f.NP.blood)) / (1 + b)) * (( 1 + b) / (AC.PL.blood * a)))
}
Ka.BC(params["Liver",])
liver <- Ka.BC(params["Liver",])
liver
liver
Liver
Kidney
detach(x)
detach(params)
attach(params)
Kidney
detach(params)
Heart <- df(AC = c(1,2), DR = c(3,4))
Heart <- data.frame(AC = c(1,2), DR = c(3,4))
apply(Heart,1, (AC+DR)
)
apply(Heart,1, fun = AC+DR)
?apply
apply(Heart,1, fun = (AC+DR))
apply(Heart,1, FUN =  = (AC+DR))
apply(Heart,1, FUN = (AC+DR))
apply(Heart,1, FUN = Heart$AC+Heart$DR)
y <- function(x) {}
y <- function(x) {}
y <- function(x) {
attach(x)
on.exit(detach(x))
return(AC + DR)
}
apply(Heart, 1 ,y)
y <- function(x) {
return(AC + DR)
}
apply(Heart, 1 ,y)
attach(Heart)
AD
Ac
AC
detach(Heart)
AC
params <- read.csv("~/PhD work/Minimal PBPK model/parameters for rodgers +rowland.csv")
drug <- read.csv("drug parameter file")
attach(params["Liver",])
f.IW.blood
View(params)
params["Liver",]
params[1,]
?read.csv
params <- read.csv("~/PhD work/Minimal PBPK model/parameters for rodgers +rowland.csv", row.names = TRUE)
parmars <- read.csv("~/PhD Work/Minimal PBPK model/parameters for rodgers +rowland.csv", row.names=1)
View(parmars)
#on.exit(detach(x))
attach(parmars["Liver",])
AC.PL
drug.pKa <- 12
Kp.BC <- 1
a <- 10^(drug.pKa-pH.blood)
b <- 10^(drug.pKa-pH.P)
P <- 10^2
return(Ka <- (Kp.BC - (((1 + a) / (1 + b)) * f.IW.blood) - ((P * f.NL.blood + (0.3 * P + 0.7) * f.NP.blood)) / (1 + b)) * (( 1 + b) / (AC.PL.blood * a)))
Ka <- (Kp.BC - (((1 + a) / (1 + b)) * f.IW.blood) - ((P * f.NL.blood + (0.3 * P + 0.7) * f.NP.blood)) / (1 + b)) * (( 1 + b) / (AC.PL.blood * a)))
Ka
